- to return two values you can seperate it using a comma between two variables. This is called a tuple. 
- to store the return value you can list the to varibles next to the function eg. name, house = fun()
* you don't need to use the same vaibles fro each function

- Tuple: is a anoter type of date in python that;s a collection of values (eg. x,y,z) and is similar to a list
    - it also cannot be modified (immutable)
        - if you override it by trying to change it, a TypeError will occur
        - to override it and change the contents use []
            - list can change, tuple cannot change
            -  lists are defined by []
            - tuples are defined by ()
            - when you access it you use [no.]
            - dictionaries are mutable
    - tuples can have vairbles inside of them
    - it's similar to a list because in a list you have two things while in one tuple you ave two things
    - eg. return (name,house) or return name,house
        - the parenthesis are used to show that there is one clause with two things
    - tuple's are used to not allow anyone to change the varibles
    - 

- Immutable: you can't change it, in regards to oop

Classes

- To create a child class use a dot after the class. These are called attributes
    - eg. student = student.class
- When you use a class you create objects aka instances
    - The correct teriminology for them is instance variables
- Best technique for classes is to create variables then put it into a function
    - eg. 
        ~ varible1=1 
        ~ vairble2=2 
        ~ student=Student(varible1, varible2) #constructor call
            - Constructor call: Will construct the object in the same way (the class) but can be individually modified (user can change the name and house)
    - allows for error checking
- Methods (instance method): functions inside of class 
    - these allow you to determine behaviour in a special sense
    - you can make varible optionable by having a default of none in the parameters of the method
    - Self: within a Instance method is used to give you access to the current object that was just created
- Encapsulation: 
    - A key idea within OOP that recommendends that you put all the functionality (eg. validation) insde of the class
-  Exceptions:
    - Phythonic="Raise": to create your own exceptions when something goes wrong
        - eg. raise ValueError("missing house")